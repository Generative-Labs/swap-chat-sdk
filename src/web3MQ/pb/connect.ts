// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "connect.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
// msgSign = RSA(nodeId + userId + timestamp)

/**
 * @generated from protobuf message pb.ConnectCommand
 */
export interface ConnectCommand {
  /**
   * @generated from protobuf field: string nodeId = 1;
   */
  nodeId: string;
  /**
   * @generated from protobuf field: string userId = 2;
   */
  userId: string;
  /**
   * @generated from protobuf field: uint64 timestamp = 3;
   */
  timestamp: bigint;
  /**
   * @generated from protobuf field: string msgSign = 4;
   */
  msgSign: string;
}
/**
 * @generated from protobuf message pb.DisconnectCommand
 */
export interface DisconnectCommand {
  /**
   * @generated from protobuf field: string nodeId = 1;
   */
  nodeId: string;
  /**
   * @generated from protobuf field: string userId = 2;
   */
  userId: string;
  /**
   * @generated from protobuf field: uint64 timestamp = 3;
   */
  timestamp: bigint;
  /**
   * @generated from protobuf field: string msgSign = 4;
   */
  msgSign: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ConnectCommand$Type extends MessageType<ConnectCommand> {
  constructor() {
    super('pb.ConnectCommand', [
      { no: 1, name: 'nodeId', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'userId', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'timestamp',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 4, name: 'msgSign', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ConnectCommand>): ConnectCommand {
    const message = { nodeId: '', userId: '', timestamp: 0n, msgSign: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ConnectCommand>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ConnectCommand,
  ): ConnectCommand {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case /* string nodeId */ 1:
        message.nodeId = reader.string();
        break;
      case /* string userId */ 2:
        message.userId = reader.string();
        break;
      case /* uint64 timestamp */ 3:
        message.timestamp = reader.uint64().toBigInt();
        break;
      case /* string msgSign */ 4:
        message.msgSign = reader.string();
        break;
      default:
        let u = options.readUnknownField;
        if (u === 'throw')
          throw new globalThis.Error(
            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
          );
        let d = reader.skip(wireType);
        if (u !== false)
          (u === true ? UnknownFieldHandler.onRead : u)(
            this.typeName,
            message,
            fieldNo,
            wireType,
            d,
          );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ConnectCommand,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string nodeId = 1; */
    if (message.nodeId !== '') writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
    /* string userId = 2; */
    if (message.userId !== '') writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* uint64 timestamp = 3; */
    if (message.timestamp !== 0n) writer.tag(3, WireType.Varint).uint64(message.timestamp);
    /* string msgSign = 4; */
    if (message.msgSign !== '') writer.tag(4, WireType.LengthDelimited).string(message.msgSign);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.ConnectCommand
 */
export const ConnectCommand = new ConnectCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisconnectCommand$Type extends MessageType<DisconnectCommand> {
  constructor() {
    super('pb.DisconnectCommand', [
      { no: 1, name: 'nodeId', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'userId', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'timestamp',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 4, name: 'msgSign', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<DisconnectCommand>): DisconnectCommand {
    const message = { nodeId: '', userId: '', timestamp: 0n, msgSign: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<DisconnectCommand>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DisconnectCommand,
  ): DisconnectCommand {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case /* string nodeId */ 1:
        message.nodeId = reader.string();
        break;
      case /* string userId */ 2:
        message.userId = reader.string();
        break;
      case /* uint64 timestamp */ 3:
        message.timestamp = reader.uint64().toBigInt();
        break;
      case /* string msgSign */ 4:
        message.msgSign = reader.string();
        break;
      default:
        let u = options.readUnknownField;
        if (u === 'throw')
          throw new globalThis.Error(
            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
          );
        let d = reader.skip(wireType);
        if (u !== false)
          (u === true ? UnknownFieldHandler.onRead : u)(
            this.typeName,
            message,
            fieldNo,
            wireType,
            d,
          );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DisconnectCommand,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string nodeId = 1; */
    if (message.nodeId !== '') writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
    /* string userId = 2; */
    if (message.userId !== '') writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* uint64 timestamp = 3; */
    if (message.timestamp !== 0n) writer.tag(3, WireType.Varint).uint64(message.timestamp);
    /* string msgSign = 4; */
    if (message.msgSign !== '') writer.tag(4, WireType.LengthDelimited).string(message.msgSign);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.DisconnectCommand
 */
export const DisconnectCommand = new DisconnectCommand$Type();
